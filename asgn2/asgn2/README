Group 7
Name, Roll No
Abhisek Panda, 150026
Raktim Mitra, 150562
Sanket, 150634

Build and Run Description:

PLEASE USE NASM(Netwide Assembler) ASSEMBLER TO COMPILE x86 CODE.

cd into asgn2 directory.

To run code generation program:
	use make to build.
	bin/codegen test/test1.ir (this will output the generated code in stdout)

To run the testcases directly: (ir -> assembly -> execution of assembly -> output)
	use make to build.
	./gen_com_run.sh <TestFilename>


Short Description of Code:
	utilities.py contains code for Instruction structure generation from ir code, symbol table generation, register descriptors and utilities for handling array notation.

	Gen_Code.py is our main code generator program which contains :
		1. A CodeGenerator class which contains methods for x8 code generationf for different type of instructions and data sections. The gen_code method in the class checks for instruction type and translates accordingly.
		2. next_use function which determines liveness and next use information for each statement in basic block by performing a backward pass.
			Then, it generates assembly code for each basic block by making a forward pass
			Finally, it saves all register contents into memory and	resets the liveness and next use info in symbol table.
		3. The main function to read input ir file and call the code generator method
	Get_Reg.py contains code for finding suitable register for the next x86 instruction to be generated using the next_use heuristic. Other than that it also contains code for register descriptor updation, context saving for jump calls etc.


Three address code instructions:-

1,decl_array,arr[N]
        Declares Array
        arr-> Name of the array
        N -> Size of the array

2,=,x,<symbol>
        Assignment operations
        x = <symbol> where symbol can be a number or another variable or arr[i]

	NOTE:- Only two kind of array operations are allowed:-
	a[i] = t
	t = a[i]

3,call,func_name,optional_var
        Calls function func name, and if function returns something it's value will be stored in optional_var

4,ret,optional_return_var
        Returns from function and optional_return_var is optional variable this function returns

5,op,a,b,c            op in [&,|,^,+,-,%,/,*,<<,>>]
	Arithmetic and bitwise logical operations are as given in example.

6,ifgoto, leq,a,b,<line no. or label>
    goto, line_number_or_label
	Conditional and unconditionlal jumps aree as given in examples.

7,print,n
	Prints Integer n

8,input,n
	Scans integer input from stdin

9,op,a,b              op in [~,!,++,--]
	Does unary operation on b and stores in a

10,label, label_name
	Puts label with label_name, same for function

Test cases:-
        fibo.ir:- Input:- n
                  Output:- n-th fibonacci number followed by all n fibonacci numbers in newline

        bin_search.ir:- Input:- n, key, n sorted array elements
                        Output:- This test case implements Binary Search and outputs index of the key.

        goto.ir:- This file tests goto.
        ifgoto_rocks.ir:- This file tests ifgoto if run correct print only one value
        divide_neg.ir:- This file tests division by negative number
        array_index.ir:- This file tests next use function
        eax_return.ir:- This file tests assignment(Multiple variables in one register) and return statement
        unary.ir:- Input:- a,b
                   Output:- a & b, a | b, a^b, ~(a & b), a & b
        spill_test.ir:- This file contains multiple random test cases and print statements
